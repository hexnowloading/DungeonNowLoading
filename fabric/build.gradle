plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom'
}
base {
    archivesName = "${mod_name}-fabric-${minecraft_version}"
}
dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":common")

    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.4.1")))

    include modImplementation("fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${forgeconfigapiport_version}")
    include modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}")
    include modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}")
    include modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-world:${cca_version}")
    //modImplementation(include("io.github.fabricators_of_create.Porting-Lib:entity:${port_lib_version}+${minecraft_version}"))
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

def resourceTargets = ['fabric.mod.json', 'pack.mcmeta']

def replaceProperties = [
        mod_id: mod_id,
        version: version,
        mod_name: mod_name,
        mod_author: mod_author,
        fabric_loader_version: fabric_loader_version,
        minecraft_version: minecraft_version,
        forgeconfigapiport_version: forgeconfigapiport_version
]

processResources {
    from project(":common").sourceSets.main.resources

    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}